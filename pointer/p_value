指针的值（即地址）应属于下列4种状态之一
1. 指向一个对象。
2. 指向紧邻对象所占空间的下一个位置。
3. 空指针，意味着指针没有指向任何对象。
4. 无效指针，也就是上述情况之外的其他值。

int ival = 42;
int *p = &ival; // p存放着变量ival的地址，或者说p是指向变量ival的指针
cout << *p;     // 由符号*得到指针p所指的对象，输出42

*p = 0；        // 由符号*得到指针p所指的对象，即可经由p为变量ival赋值
cout << *p;     // 输出0

nullptr

int zero = 0;
pi = zero;      // 不能把int变量直接赋值给指针


赋值永远改变的是等号左侧的对象

int ival = 1024;
int *pi = &ival;    // pi指向一个int型的数
int **ppi = &pi;    // ppi指向一个int型的指针

指向指针的引用
int i = 42;
int *p;         // p是一个int型指针
int *&r = p;    // r是一个对指针p的引用

r = &i;         // r引用了一个指针，因此给r赋值&i就是令p指向i
*r = 0；        // 解引用r得到i，也就是p指向的对象，将i的值改为0